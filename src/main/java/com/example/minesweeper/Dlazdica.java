package com.example.minesweeper;

import javafx.scene.control.Button;
import javafx.scene.input.MouseButton;

/**
 * Abstraktn√° z√°kladn√° trieda pre v≈°etky dla≈ædice v hre m√≠ny
 * Demon≈°truje dediƒçnos≈• a polymorfizmus
 * Zapuzdruje z√°kladn√© vlastnosti ka≈ædej dlazdice
 */
public abstract class Dlazdica extends Button {
    // Zapuzdren√© atrib√∫ty - s√∫kromn√©, pr√≠stupn√© cez met√≥dy
    protected int riadok;           // Poz√≠cia dlazdice v riadku
    protected int stlpec;           // Poz√≠cia dlazdice v stƒ∫pci
    protected StavDlazdice stav;    // Aktu√°lny stav dlazdice (enum)
    protected MinovePole minovepole; // Referencia na hern√© pole

    /**
     * Kon≈°truktor pre vytvorenie novej dlazdice
     * @param riadok poz√≠cia v riadku
     * @param stlpec poz√≠cia v stƒ∫pci
     * @param minovepole referencia na hern√© pole
     */
    public Dlazdica(int riadok, int stlpec, MinovePole minovepole) {
        this.riadok = riadok;
        this.stlpec = stlpec;
        this.stav = StavDlazdice.ZATVORENE;  // Zaƒç√≠na v zatvorenom stave
        this.minovepole = minovepole;

        setupButton();
        setupEventHandlers();
    }

    /**
     * Nastavenie z√°kladn√©ho vzhƒæadu tlaƒçidla
     */
    private void setupButton() {
        setPrefSize(30, 30);
        setStyle("-fx-font-weight: bold; -fx-font-size: 12px;");
        setText("");
    }

    /**
     * Nastavenie obsluhy udalost√≠ my≈°i
     * ƒΩav√© tlaƒçidlo - otvori≈• dla≈ædicu
     * Prav√© tlaƒçidlo - oznaƒçi≈• vlajoƒçkou
     */
    private void setupEventHandlers() {
        setOnMouseClicked(event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                otvorit();
            } else if (event.getButton() == MouseButton.SECONDARY) {
                oznacit();
            }
        });
    }

    /**
     * Abstraktn√° met√≥da pre vykreslenie dlazdice - polymorfizmus
     * Ka≈æd√Ω typ dlazdice implementuje vlastn√© vykreslenie
     */
    public abstract void vykresli();

    /**
     * Met√≥da pre otvorenie dlazdice
     * Spracov√°va logiku otv√°rania a kontrolu stavu hry
     */
    public void otvorit() {
        // M√¥≈æeme otvori≈• len zatvoren√∫ dla≈ædicu poƒças hrania
        if (stav == StavDlazdice.ZATVORENE && minovepole.getStav() == StavPola.HRANIE) {

            // Spracovanie prv√©ho kliku - generovanie m√≠n mimo bezpeƒçnej z√≥ny
            if (minovepole.isPrvyKlik()) {
                minovepole.spracujPrvyKlik(riadok, stlpec);
            }

            stav = StavDlazdice.OTVORENE;
            minovepole.pridajTah();  // Zv√Ω≈°enie poƒç√≠tadla ≈•ahov
            vykresli();              // Polymorfn√© volanie vykreslenia

            // Kontrola, ƒçi je to m√≠na - polymorfizmus cez instanceof
            if (this instanceof Mina) {
                minovepole.setStav(StavPola.NEUSPECH);
                minovepole.odhalVsetkyMiny();
            } else {
                // Kontrola v√Ωhry
                minovepole.skontrolujVyhru();
                // Automatick√© odhalenie susedn√Ωch dla≈æd√≠c ak je pr√°zdna
                if (getPocetSusednychMin() == 0) {
                    minovepole.otvorSusedne(riadok, stlpec);
                }
            }
        }
    }

    /**
     * Met√≥da pre oznaƒçenie/odznaƒçenie dlazdice vlajoƒçkou
     */
    public void oznacit() {
        if (minovepole.getStav() == StavPola.HRANIE) {
            if (stav == StavDlazdice.ZATVORENE) {
                // Oznaƒçenie vlajoƒçkou
                stav = StavDlazdice.OZNACENE;
                setText("üö©");
                setStyle("-fx-background-color: yellow; -fx-font-weight: bold;");
            } else if (stav == StavDlazdice.OZNACENE) {
                // Odznaƒçenie vlajoƒçky
                stav = StavDlazdice.ZATVORENE;
                setText("");
                setStyle("-fx-font-weight: bold; -fx-font-size: 12px;");
            }
        }
    }

    /**
     * Abstraktn√° met√≥da pre z√≠skanie poƒçtu susedn√Ωch m√≠n
     * @return poƒçet susedn√Ωch m√≠n
     */
    public abstract int getPocetSusednychMin();

    // Gettery a settery pre zapuzdrenie
    public StavDlazdice getStav() { return stav; }

    /**
     * Setter pre stav dlazdice s automatick√Ωm prekreslen√≠m
     * @param stav nov√Ω stav dlazdice
     */
    public void setStav(StavDlazdice stav) {
        this.stav = stav;
        vykresli();  // Polymorfn√© volanie
    }
}
